// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  PRINCIPAL
  ADMIN
  PEGAWAI
}

model Golongan {
  id            Int       @id @default(autoincrement())
  namaGolongan  String
  gajiPokok     String
  pegawai       Pegawai[]
}

model Pegawai {
  id            Int      @id @default(autoincrement())
  namaPegawai   String
  pendidikan    String
  mulaiKerja    DateTime
  golonganId    Int
  pin           Int?      @unique

  golongan Golongan  @relation(fields: [golonganId], references: [id])
  absensi  Absensi[]
  user     User[]
}

model Absensi {
  id          Int      @id @default(autoincrement())
  waktuMasuk  DateTime @default(dbgenerated("timezone('Asia/Jakarta', now())"))
  updatedAt   DateTime @updatedAt
  pegawaiId   Int

  pegawai Pegawai @relation(fields: [pegawaiId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pegawaiId Int
  role      UserRole  @default(PEGAWAI)

  pegawai Pegawai @relation(fields: [pegawaiId], references: [id], onDelete: Cascade)
}

model WebSettings {
  name    String    @id
  value   String
}

model WebLog {
  id          String    @id @default(cuid())
  type        String
  message     String
  createdAt   DateTime  @default(now())
}